name: Backend Prod Server CI/CD

on:
  push:
    branches: [ "main" , "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: workflow_dispatch에서 지정한 branch로 checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.SUBMODULE_TOKEN }}
          submodules: true

      - name: JDK 17로 설정
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Gradle에 실행 권한 부여
        run: chmod +x gradlew
        shell: bash

      - name: Actions/Caches에 Gradle 라이브러리 캐싱
        id: cache-gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: gradle 빌드
        run: ./gradlew clean build -x test
        shell: bash

      - name: 도커 허브에 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 도커 이미지 빌드 및 푸시
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -t app .
          docker tag app ${{ secrets.DOCKERHUB_USERNAME }}/docker-cicd:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/docker-cicd:latest

      # EC2 서버에 배포
      - name: EC2서버에 배포
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.HOST_PROD}} # EC2 퍼블릭 IPv4 DNS
          username: ${{secrets.USERNAME}} # EC2 host name (e.g. ubuntu)
          key: ${{ secrets.SSH_PEM_KEY }} # EC2 ssh 접속 할 때 쓰는 .pem 파일의 내용 그대로 복붙
          envs: GITHUB_SHA
          # 주의 : 실행중인 컨테이너 전부 종료 EC2내 다른컨테이너도 띄워져 있다면 전부 죽이면 안됨
          script: |
            sudo docker stop $(sudo docker ps -a -q) 
            sudo docker pull ${{secrets.DOCKERHUB_USERNAME}}/docker-cicd:latest
            sudo docker run -d -p 8080:8080 ${{secrets.DOCKERHUB_USERNAME}}/docker-cicd:latest
            sudo docker image prune -f
